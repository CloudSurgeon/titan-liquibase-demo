pipeline {
    agent any
    environment {
      APPNAME = 'PATIENTS'
      APPDIR = 'automation-framework-demo'
      ANSIBLE_DIR = "$APPDIR/ansible"
      TITAN = '/usr/local/bin/titan'
      JAR = 'postgresql.jar'
      PG_CONTAINERNAME = 'patients-db'
      JQ = 'docker run -i stedolan/jq'
      LIQUIBASE = "docker run -v ${JENKINS_HOME}/jdbc:/liquibase/jdbc -v $(pwd)/changelog:/liquibase/changelog liquibase/liquibase --driver=org.postgresql.Driver --classpath=/liquibase/jdbc/${JAR} --url=\"jdbc:postgresql://$IPADDRESS:5432/dafdb\" --changeLogFile=/liquibase/changelog/changelog.yaml --username=delphixdb --password=delphixdb"
    }
    stages {
        stage('Prepare Environment'){
            steps {
                sh "env"
                sh "git clean -ffdx"
                sh "echo $PATH"
                sh "chmod +x changelog"
            }
        }

        stage('Compile Application') {
            steps {
                dir (env.ANSIBLE_DIR) {
                    sh "echo Compile"
                    sh  "ansible-playbook deploy.yaml -e git_branch=origin/develop -e git_commit=x -e sdlc_env=LOCAL --tags \"build\" --limit localhost"
                }
            }
        }

        stage('Database') {
			steps {
                sh """
                    #${TITAN} run -- --name patients-db -p 5432:5432 -d postgres:latest
                    #sleep 5
                    echo "Titan-y things"
                    ${LIQUIBASE} generateChangeLog
                    #${TITAN} rm -f patients-db
                """
			} 
        }

        stage('Deploy Application Stack') {
            steps {
                dir (env.ANSIBLE_DIR) {
                    sh "echo Deploy"
                    sh  "ansible-playbook deploy.yaml -e git_branch=origin/develop -e git_commit=x -e sdlc_env=LOCAL --tags \"deploy\" --limit localhost"
                }
            }
        }
    }
}
 