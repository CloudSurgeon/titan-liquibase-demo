pipeline {
    agent any
    environment {
      APPNAME = 'PATIENTS'
      APPDIR = 'automation-framework-demo'
      ANSIBLE_DIR = "$APPDIR/ansible"
      TITAN = '/usr/local/bin/titan'
      JAR = 'postgresql.jar'
      PG_CONTAINERNAME = 'patients-db'
      JQ = 'docker run -i stedolan/jq'
      LIQUIBASE = 'docker run -v /var/lib/jenkins/workspace/Patients_Pipeline_app/jdbc:/liquibase/jdbc -v /var/lib/jenkins/workspace/Patients_Pipeline_app/changelog:/liquibase/changelog liquibase/liquibase --driver=org.postgresql.Driver --classpath=/liquibase/jdbc/postgresql.jar --url=jdbc:postgresql://localhost:5432/postgres --changeLogFile=/liquibase/changelog/changelog.yaml --username=postgres --password=postgres'
    }
    stages {
        stage('Prepare Environment'){
            steps {
                sh "env"
                sh "git clean -ffdx"
                sh "echo $PATH"
            }
        }

        stage('Compile Application') {
            steps {
                dir (env.ANSIBLE_DIR) {
                    sh "echo Compile"
                    // sh  "ansible-playbook deploy.yaml -e git_branch=origin/develop -e git_commit=x -e sdlc_env=LOCAL --tags \"build\" --limit localhost"
                }
            }
        }

        stage('Database') {
			steps {
                echo "Titan-y things"
                sh """
                    ${TITAN} run -- --name patients-db -p 5432:5432 -d postgres:latest
                """
			} 
        }

        stage('Deploy Application Stack') {
            steps {
                dir (env.ANSIBLE_DIR) {
                // sh  "ansible-playbook deploy.yaml -e git_branch=origin/develop -e git_commit=x -e sdlc_env=DEV --tags \"deploy\" --limit devweb"
                sh "echo Deploy"
                }
            }
        }
    }
}
 